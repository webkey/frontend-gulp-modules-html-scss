@mixin clearfix() {
	&::after {
		content: '';
		display: table;
		clear: both;
	}
}

@mixin optional-at-root($sel) {
	@at-root #{if(not &, $sel, selector-append(&, $sel))} {
		@content;
	}
}

@mixin input-placeholder() {
	@include optional-at-root('::-webkit-input-placeholder') {
		@content;
	}

	@include optional-at-root(':-moz-placeholder') {
		@content;
	}

	@include optional-at-root('::-moz-placeholder') {
		opacity: 1;
		@content;
	}

	@include optional-at-root(':-ms-input-placeholder') {
		opacity: 1;
		@content;
	}

	@include optional-at-root('.placeholder') {
		@content;
	}
}

@mixin input-placeholder-focus {
	@include optional-at-root(":focus::-webkit-input-placeholder") {
		@content;
	}

	@include optional-at-root(":focus:-moz-placeholder") {
		@content;
	}

	@include optional-at-root(":focus::-moz-placeholder") {
		@content;
	}

	@include optional-at-root(":focus:-ms-input-placeholder") {
		@content;
	}

	@include optional-at-root(".placeholder:focus") {
		@content;
	}
}

@mixin input-placeholder-hover {
	@include optional-at-root(":hover::-webkit-input-placeholder") {
		@content;
	}

	@include optional-at-root(":hover:-moz-placeholder") {
		@content;
	}

	@include optional-at-root(":hover::-moz-placeholder") {
		@content;
	}

	@include optional-at-root(":hover:-ms-input-placeholder") {
		@content;
	}

	@include optional-at-root(".placeholder:hover") {
		@content;
	}
}

@mixin below($width, $orientation: 'width') {
	@media screen and (max-#{$orientation}: $width) {
		@content;
	}
}

@mixin above($width, $orientation: 'width') {
	@media screen and (min-#{$orientation}: $width) {
		@content;
	}
}

@mixin between($minWidth, $maxWidth, $orientation: 'width') {
	@media screen and (min-#{$orientation}: $minWidth) and (max-#{$orientation}: $maxWidth) {
		@content;
	}
}

@mixin sm {
	@media (min-width: #{$sm}) {
		@content;
	}
}

@mixin md {
	@media (min-width: #{$md}) {
		@content;
	}
}

@mixin lg {
	@media (min-width: #{$lg}) {
		@content;
	}
}

@mixin xl {
	@media (min-width: #{$xl}) {
		@content;
	}
}

@mixin truncate($truncation-boundary) {
	max-width: $truncation-boundary;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

@mixin fix-text-size-adjust() {
	background-image: linear-gradient(transparent, transparent);
}

@mixin margin-x($margin) {
	margin-left: $margin;
	margin-right: $margin;
}

@mixin margin-y($margin) {
	margin-top: $margin;
	margin-bottom: $margin;
}

@mixin padding-x($padding) {
	padding-left: $padding;
	padding-right: $padding;
}

@mixin padding-y($padding) {
	padding-top: $padding;
	padding-bottom: $padding;
}

// Generate font-face
// @include font-face("candara", "../fonts/candara/regular/candara", normal, normal, eot woff ttf svg)

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;
	$extmods: (eot: "?", svg: "#" + str-replace($name, " ", "_"));
	$formats: (otf: "opentype", ttf: "truetype");

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
		font-display: swap;
	}
}

// Round for rem
@function pow($number, $exponent) {
	$value: 1;

	@if $exponent > 0 {
		@for $i from 1 through $exponent {
			$value: $value * $number;
		}
	}

	@return $value;
}

@function round-float($number, $n) {
	$float: pow(10, $n);
	$value: round($number * $float) / $float;

	@return $value;
}

@function floor-float($number, $n) {
	$float: pow(10, $n);
	$value: floor($number * $float) / $float;

	@return $value;
}

@function ceil-float($number, $n) {
	$float: pow(10, $n);
	$value: ceil($number * $float) / $float;

	@return $value;
}

// Set ratio
@mixin ratio($x: 1, $y: 1) {
	$padding: round-float($y / $x * 100%, 2);

	padding-top: $padding;
}
